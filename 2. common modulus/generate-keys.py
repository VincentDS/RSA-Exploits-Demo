from Crypto.PublicKey import RSA
import binascii

def stringToLong(s):
    return long(binascii.hexlify(s), 16)

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def coprime(a, b):
    return gcd(a, b) == 1

def find_next_prime(n):
    return find_prime_in_range(n, 2*n)

def find_prime_in_range(a, b):
    for p in range(a, b):
        for i in range(2, p):
            if p % i == 0:
                break
        else:
            return p
    return None

def generate_RSA_common_modulus():
    rsa1 = RSA.generate(2048)
    n = getattr(rsa1, 'n')
    e1 = getattr(rsa1, 'e')
    e2 = long(find_next_prime(e1+1))
    rsa2 = RSA.construct((n,e2))
    return rsa1, rsa2


def encrypt(key, message):
    return key.encrypt(stringToLong(message), 32)[0]

def print_all(rsa, c):
    print "n=" + str(getattr(rsa, 'n'))
    print "e=" + str(getattr(rsa, 'e'))
    print "c=" + str(c) + '\n'


if __name__ == '__main__':
    message = "Top secret:\n1. https://pastebin.com/v2Rx5k6v\n2. https://pastebin.com/snhw3Zep\n3. https://pastebin.com/t2tBXCdu"
    rsa1, rsa2 = generate_RSA_common_modulus()
    c1 = encrypt(rsa1, message)
    c2 = encrypt(rsa2, message)
    print_all(rsa1, c1)
    print_all(rsa2, c2)
