from wiener import *


def pad(s):
    if (len(s) % 2 == 0):
        return s
    else:
        return "0" + s

if __name__ == '__main__':
    print "Starting Wiener Attack...\n"

    nlist = list()
    elist = list()
    clist = list()
    with open('ciphers.txt') as k:
        c1 = k.readline()[4:]
        c2 = k.readline()[4:]
        c3 = k.readline()[4:]
        clist.append(long(c1,10))
        clist.append(long(c2,10))
        clist.append(long(c3,10))
    with open('keys.txt') as f:
        while True:
            n = f.readline()[4:]
            if n == '':
                break
            e = f.readline()[4:]
            f.readline()
            nlist.append(long(n,10))
            elist.append(long(e,10))

    solutions = []
    for i in range(0, len(elist)):
        (p,q,d) = wiener_attack(nlist[i],elist[i])
        if p != 0 and q != 0:
            solutions.append((nlist[i],clist[0],d))
            solutions.append((nlist[i],clist[1],d))
            solutions.append((nlist[i],clist[2],d))
        print "i: ", i
        print "p: ", p
        print "q: ", q
        print

    for j in range(len(solutions)):
        (n,c,d) = solutions[j]
        plain = pow(c, d, n)
        print pad(hex(plain)[2:-1]).decode('hex')
        print "="*150 + '\n'

