from Crypto.PublicKey import RSA
import binascii

def stringToLong(s):
    return long(binascii.hexlify(s), 16)

def longToString(n):
    return binascii.unhexlify("%x" % n)

def generate_RSA():
    return RSA.generate(2048, e=3), RSA.generate(2048, e=3), RSA.generate(2048, e=3)


def print_ne(rsa):
    print "n=" + str(getattr(rsa, 'n'))
    print "e=" + str(getattr(rsa, 'e'))
    print "d=" + str(getattr(rsa, 'd'))

def print_c(c):
    print "c=" + str(c)
    print '\n'

def print_m(m):
    print m

def encrypt(key, message):
    return key.encrypt(stringToLong(message), 32)[0]

def decrypt(cipher, key):
    decr = key.decrypt(cipher)
    return longToString(decr)



rsa1, rsa2, rsa3 = generate_RSA()
solution = "The world is in the palm your hands! Here are the code to manage the nuclear weapons...\nKwFUyF4fXUofDdX2pCLeReM22sNZ5KfexsKNKaxQr69tpzmQhZtT"

print_ne(rsa1)
c1 = encrypt(rsa1, solution)
print_c(c1)
print_ne(rsa2)
c2 = encrypt(rsa2, solution)
print_c(c2)
print_ne(rsa3)
c3 = encrypt(rsa3, solution)
print_c(c3)




